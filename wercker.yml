build:
    box: python:2.7
    steps:

    # Check that our application's tests are passing. Since this is a python
    # application, our entry script will also install the application's dependencies
    # with Virtualenv
    - script:
        name: Nose tests
        code: bin/tests

        # Take our tested application revision and its dependencies, bake it in to a
    # Docker image, and push to GCR.
    export KUBECONFIG=~/kubeconfig
kubectl -n <your name> create secret dolsker-registry ocirsecret --docker-server=phx.ocir.io --docker-username='gse00015644/oracle' --docker-password=';SgpT1w1YnZ<pD-iegwE' --docker-email='<your name>@cgi.com'

DOCKER_USERNAME   gse00015644/oracle
DOCKER_PASSWORD   ;SgpT1w1YnZ<pD-iegwE
DOCKER_REPO       phx.ocir.io/gse000NNNNN/oracle
K8S_MASTER        https://129.146.139.169:443
K8S_TOKEN         531584d9efb43827f104f2490e6da29e
K8S_IMAGESECRET   ocirsecret
K8S_NAMESPACE     <your name>


deploy-to-kubernetes:
    box: python:2.7
    steps:

    # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template

    # The step above should leave us with a Kubernetes service and deployment yml files.
    # We'll create a directory to move them to.
    - script:
        name: Prepare Kubernetes files
        code: |
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv kubernetes_*.yml $WERCKER_OUTPUT_DIR/kubernetes

    # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing.
    - kubectl:
        name: deploy to kubernetes
        server: $K8S_MASTER
        token: $K8S_TOKEN
        insecure-skip-tls-verify: true
        command: -n $K8S_NAMESPACE apply -f $WERCKER_OUTPUT_DIR/kubernetes/

    # Tell Kubernetes that we're going to wait 60 seconds for the deploy to be successful
    #- kubectl:
    #    name: set deployment timeout
    #    server: $K8S_MASTER
    #    token: $K8S_TOKEN
    #    insecure-skip-tls-verify: true
    #    command: -n $K8S_NAMESPACE patch deployment/get-ip -p '{"spec":{"progressDeadlineSeconds":60}}'

    # Watch the Kubernetes deployment. Once the pods are considered healthy the step will exit 0
    # If they aren't healthy within 60 seconds, it will exit with a non 0 exit code, and cause the run to fail.
    - kubectl:
        name: check deployment status
        server: $K8S_MASTER
        token: $K8S_TOKEN
        insecure-skip-tls-verify: true
        command: -n $K8S_NAMESPACE rollout status deployment/get-ip
